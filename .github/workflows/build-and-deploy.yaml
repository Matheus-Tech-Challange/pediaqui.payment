name: CI Pipeline

on:
  pull_request:
    branches:
      - main

jobs:
  sonar-cloud:
    runs-on: ubuntu-latest

    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Configurar .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0'

      # Instalar dependências
      - name: Restore dependencies
        run: dotnet restore ./Pediaqui.Payment/Pediaqui.Payment.sln

      # Build do projeto
      - name: Build project
        run: dotnet build ./Pediaqui.Payment/Pediaqui.Payment.sln --no-restore --configuration Release

      # Executar testes e gerar relatório de cobertura
      - name: Run tests
        run: |
          mkdir -p ./TestResults
          dotnet test ./Pediaqui.Payment/Pediaqui.Payment.sln \
            --collect:"XPlat Code Coverage" \
            /p:CollectCoverage=true \
            /p:CoverletOutputFormat=coverage.opencover.xml \
            --results-directory ./TestResults

      - name: Debug Test Results
        run: ls -R ./TestResults

      # Publicar relatório de cobertura para o SonarCloud
      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin \
            /k:"Matheus-Tech-Challange_pediaqui.payment" \
            /o:"matheus-tech-challange" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths=**/TestResults/**/coverage.opencover.xml
          dotnet build ./Pediaqui.Payment/Pediaqui.Payment.sln --configuration Release          
          dotnet sonarscanner end /d:sonar.login=$SONAR_TOKEN

      # Step 6: Verificar cobertura mínima de 70%
      - name: Check coverage
        run: |
          COVERAGE_FILE=$(find ./TestResults -name "coverage.cobertura.xml" | head -n 1)
          if [ -z "$COVERAGE_FILE" ]; then
            echo "Coverage report not found."
            exit 1
          fi
          COVERAGE=$(grep -oP '(?<=line-rate=")[0-9]+(\.[0-9]+)?' "$COVERAGE_FILE" | head -n 1 | awk '{print int($1 * 100)}')
          if [ -z "$COVERAGE" ]; then
            echo "Coverage value is empty."
            exit 1
          fi
          if [ "$COVERAGE" -lt 70 ]; then
            echo "Test coverage ($COVERAGE%) is below 70%. Failing the build."
          else
            echo "Test coverage ($COVERAGE%) meets the requirement."
          fi  

  build:
    name: Build and Push Docker Image to ECR
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checar o código do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configurar AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Autenticar no ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ vars.PAYMENT_ECR_REPOSITORY_NAME }}

      # Step 4: Construir a imagem Docker
      - name: Build Docker image
        run: |
          docker build -t pediaqui-payment-image -f ./Pediaqui.Payment/WebAPI/Dockerfile ./Pediaqui.Payment

      # Step 5: Marcar e empurrar a imagem para o ECR
      - name: Tag and Push Docker image to ECR
        run: |
          IMAGE_TAG=latest
          docker tag pediaqui-payment-image:latest ${{ vars.PAYMENT_ECR_REPOSITORY_NAME }}:$IMAGE_TAG
          docker push ${{ vars.PAYMENT_ECR_REPOSITORY_NAME }}:$IMAGE_TAG

  deploy:
    name: Deploy via Terraform
    runs-on: ubuntu-latest
    needs: build

    steps:
      # Step 1: Checar o código do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configurar AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Instalar o Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      # Step 4: Inicializar o Terraform
      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      # Step 5: Aplicar o Terraform para rodar a aplicação
      - name: Terraform Apply
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_ecr_repository_name: ${{ vars.PAYMENT_ECR_REPOSITORY_NAME }}:latest
        run: |
          cd terraform
          terraform apply -auto-approve
